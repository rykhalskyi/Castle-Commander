//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    startnew(): Promise<Game> {
        let url_ = this.baseUrl + "/api/game/startnew";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStartnew(_response);
        });
    }

    protected processStartnew(response: Response): Promise<Game> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Game.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Game>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    nextturn(body: Game | undefined): Promise<Game> {
        let url_ = this.baseUrl + "/api/game/nextturn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNextturn(_response);
        });
    }

    protected processNextturn(response: Response): Promise<Game> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Game.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Game>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addfacility(body: AddFacilityInput | undefined): Promise<Game> {
        let url_ = this.baseUrl + "/api/game/addfacility";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddfacility(_response);
        });
    }

    protected processAddfacility(response: Response): Promise<Game> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Game.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Game>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    buy(body: BuyItemInput | undefined): Promise<Game> {
        let url_ = this.baseUrl + "/api/game/buy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBuy(_response);
        });
    }

    protected processBuy(response: Response): Promise<Game> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Game.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Game>(null as any);
    }
}

export class AddFacilityInput implements IAddFacilityInput {
    inputGame?: Game;
    hexagon?: number;
    startSector?: number;
    size?: FacilitySize;
    playerId?: number;

    constructor(data?: IAddFacilityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.inputGame = _data["inputGame"] ? Game.fromJS(_data["inputGame"]) : <any>undefined;
            this.hexagon = _data["hexagon"];
            this.startSector = _data["startSector"];
            this.size = _data["size"];
            this.playerId = _data["playerId"];
        }
    }

    static fromJS(data: any): AddFacilityInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddFacilityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inputGame"] = this.inputGame ? this.inputGame.toJSON() : <any>undefined;
        data["hexagon"] = this.hexagon;
        data["startSector"] = this.startSector;
        data["size"] = this.size;
        data["playerId"] = this.playerId;
        return data;
    }
}

export interface IAddFacilityInput {
    inputGame?: Game;
    hexagon?: number;
    startSector?: number;
    size?: FacilitySize;
    playerId?: number;
}

export class BuyItemInput implements IBuyItemInput {
    gameId?: string;
    item?: ExchangeItem;
    number?: number;

    constructor(data?: IBuyItemInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameId = _data["gameId"];
            this.item = _data["item"];
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): BuyItemInput {
        data = typeof data === 'object' ? data : {};
        let result = new BuyItemInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameId"] = this.gameId;
        data["item"] = this.item;
        data["number"] = this.number;
        return data;
    }
}

export interface IBuyItemInput {
    gameId?: string;
    item?: ExchangeItem;
    number?: number;
}

export class Castle implements ICastle {
    hexagons?: Hexagon[] | undefined;

    constructor(data?: ICastle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["hexagons"])) {
                this.hexagons = [] as any;
                for (let item of _data["hexagons"])
                    this.hexagons!.push(Hexagon.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Castle {
        data = typeof data === 'object' ? data : {};
        let result = new Castle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.hexagons)) {
            data["hexagons"] = [];
            for (let item of this.hexagons)
                data["hexagons"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICastle {
    hexagons?: Hexagon[] | undefined;
}

export class Dice implements IDice {
    resorceDice?: number;
    resourceDiceColor?: string | undefined;
    bonusDice?: string | undefined;

    constructor(data?: IDice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resorceDice = _data["resorceDice"];
            this.resourceDiceColor = _data["resourceDiceColor"];
            this.bonusDice = _data["bonusDice"];
        }
    }

    static fromJS(data: any): Dice {
        data = typeof data === 'object' ? data : {};
        let result = new Dice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resorceDice"] = this.resorceDice;
        data["resourceDiceColor"] = this.resourceDiceColor;
        data["bonusDice"] = this.bonusDice;
        return data;
    }
}

export interface IDice {
    resorceDice?: number;
    resourceDiceColor?: string | undefined;
    bonusDice?: string | undefined;
}

export enum ExchangeItem {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class Facility implements IFacility {
    size?: FacilitySize;
    startSector?: number;
    playerId?: number;
    primaryColor?: string | undefined;
    secondaryColor?: string | undefined;

    constructor(data?: IFacility) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.size = _data["size"];
            this.startSector = _data["startSector"];
            this.playerId = _data["playerId"];
            this.primaryColor = _data["primaryColor"];
            this.secondaryColor = _data["secondaryColor"];
        }
    }

    static fromJS(data: any): Facility {
        data = typeof data === 'object' ? data : {};
        let result = new Facility();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["startSector"] = this.startSector;
        data["playerId"] = this.playerId;
        data["primaryColor"] = this.primaryColor;
        data["secondaryColor"] = this.secondaryColor;
        return data;
    }
}

export interface IFacility {
    size?: FacilitySize;
    startSector?: number;
    playerId?: number;
    primaryColor?: string | undefined;
    secondaryColor?: string | undefined;
}

export enum FacilitySize {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class Game implements IGame {
    id?: string;
    turnMessage?: string | undefined;
    currentTurn?: number;
    currentPlayer?: number;
    players?: Player[] | undefined;
    castle?: Castle;
    dice?: Dice;
    log?: string | undefined;

    constructor(data?: IGame) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.turnMessage = _data["turnMessage"];
            this.currentTurn = _data["currentTurn"];
            this.currentPlayer = _data["currentPlayer"];
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(Player.fromJS(item));
            }
            this.castle = _data["castle"] ? Castle.fromJS(_data["castle"]) : <any>undefined;
            this.dice = _data["dice"] ? Dice.fromJS(_data["dice"]) : <any>undefined;
            this.log = _data["log"];
        }
    }

    static fromJS(data: any): Game {
        data = typeof data === 'object' ? data : {};
        let result = new Game();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["turnMessage"] = this.turnMessage;
        data["currentTurn"] = this.currentTurn;
        data["currentPlayer"] = this.currentPlayer;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item ? item.toJSON() : <any>undefined);
        }
        data["castle"] = this.castle ? this.castle.toJSON() : <any>undefined;
        data["dice"] = this.dice ? this.dice.toJSON() : <any>undefined;
        data["log"] = this.log;
        return data;
    }
}

export interface IGame {
    id?: string;
    turnMessage?: string | undefined;
    currentTurn?: number;
    currentPlayer?: number;
    players?: Player[] | undefined;
    castle?: Castle;
    dice?: Dice;
    log?: string | undefined;
}

export class Hexagon implements IHexagon {
    colorValue?: string | undefined;
    color?: HexagonColor;
    facilities?: Facility[] | undefined;

    constructor(data?: IHexagon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.colorValue = _data["colorValue"];
            this.color = _data["color"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(Facility.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Hexagon {
        data = typeof data === 'object' ? data : {};
        let result = new Hexagon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["colorValue"] = this.colorValue;
        data["color"] = this.color;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IHexagon {
    colorValue?: string | undefined;
    color?: HexagonColor;
    facilities?: Facility[] | undefined;
}

export enum HexagonColor {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class Player implements IPlayer {
    name?: string | undefined;
    isActive?: boolean;
    primaryColor?: string | undefined;
    secondaryColor?: string | undefined;
    resources?: PlayerResource[] | undefined;
    bronze?: number;
    silver?: number;
    gold?: number;

    constructor(data?: IPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isActive = _data["isActive"];
            this.primaryColor = _data["primaryColor"];
            this.secondaryColor = _data["secondaryColor"];
            if (Array.isArray(_data["resources"])) {
                this.resources = [] as any;
                for (let item of _data["resources"])
                    this.resources!.push(PlayerResource.fromJS(item));
            }
            this.bronze = _data["bronze"];
            this.silver = _data["silver"];
            this.gold = _data["gold"];
        }
    }

    static fromJS(data: any): Player {
        data = typeof data === 'object' ? data : {};
        let result = new Player();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isActive"] = this.isActive;
        data["primaryColor"] = this.primaryColor;
        data["secondaryColor"] = this.secondaryColor;
        if (Array.isArray(this.resources)) {
            data["resources"] = [];
            for (let item of this.resources)
                data["resources"].push(item ? item.toJSON() : <any>undefined);
        }
        data["bronze"] = this.bronze;
        data["silver"] = this.silver;
        data["gold"] = this.gold;
        return data;
    }
}

export interface IPlayer {
    name?: string | undefined;
    isActive?: boolean;
    primaryColor?: string | undefined;
    secondaryColor?: string | undefined;
    resources?: PlayerResource[] | undefined;
    bronze?: number;
    silver?: number;
    gold?: number;
}

export class PlayerResource implements IPlayerResource {
    number?: number;
    color?: string | undefined;
    isBase?: boolean;

    constructor(data?: IPlayerResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.color = _data["color"];
            this.isBase = _data["isBase"];
        }
    }

    static fromJS(data: any): PlayerResource {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerResource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["color"] = this.color;
        data["isBase"] = this.isBase;
        return data;
    }
}

export interface IPlayerResource {
    number?: number;
    color?: string | undefined;
    isBase?: boolean;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}